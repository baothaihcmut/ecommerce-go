// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type RoleEnum string

const (
	RoleEnumADMIN     RoleEnum = "ADMIN"
	RoleEnumCUSTOMER  RoleEnum = "CUSTOMER"
	RoleEnumSHOPOWNER RoleEnum = "SHOP_OWNER"
)

func (e *RoleEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoleEnum(s)
	case string:
		*e = RoleEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for RoleEnum: %T", src)
	}
	return nil
}

type NullRoleEnum struct {
	RoleEnum RoleEnum
	Valid    bool // Valid is true if RoleEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoleEnum) Scan(value interface{}) error {
	if value == nil {
		ns.RoleEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoleEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoleEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoleEnum), nil
}

type Address struct {
	Priority int32
	Street   string
	Town     string
	City     string
	Province string
	UserID   uuid.UUID
}

type Admin struct {
	ID                  uuid.UUID
	Email               string
	Password            string
	PhoneNumber         string
	FirstName           string
	LastName            string
	CurrentRefreshToken sql.NullString
}

type Customer struct {
	UserID     uuid.UUID
	LoyalPoint sql.NullInt32
}

type ShopOwner struct {
	UserID           uuid.UUID
	BussinessLicense sql.NullString
}

type User struct {
	ID                  uuid.UUID
	Email               string
	Password            string
	PhoneNumber         string
	FirstName           string
	LastName            string
	Role                NullRoleEnum
	CurrentRefreshToken sql.NullString
}
