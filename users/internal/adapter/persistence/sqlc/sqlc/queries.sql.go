// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAddress = `-- name: CreateAddress :exec
INSERT INTO addresses(priority,street, town, city, province,user_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
`

type CreateAddressParams struct {
	Priority sql.NullInt32
	Street   sql.NullString
	Town     sql.NullString
	City     sql.NullString
	Province sql.NullString
	UserId   uuid.NullUUID
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) error {
	_, err := q.db.ExecContext(ctx, createAddress,
		arg.Priority,
		arg.Street,
		arg.Town,
		arg.City,
		arg.Province,
		arg.UserId,
	)
	return err
}

const createCustomer = `-- name: CreateCustomer :exec
INSERT INTO customers(user_id,loyal_point)
VALUES(
    $1,
    $2
)
`

type CreateCustomerParams struct {
	UserId     uuid.NullUUID
	LoyalPoint sql.NullInt32
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, createCustomer, arg.UserId, arg.LoyalPoint)
	return err
}

const createShopOwner = `-- name: CreateShopOwner :exec
INSERT INTO shop_owners(user_id,bussiness_license)
VALUES(
    $1,
    $2
)
`

type CreateShopOwnerParams struct {
	UserId           uuid.NullUUID
	BussinessLicense sql.NullString
}

func (q *Queries) CreateShopOwner(ctx context.Context, arg CreateShopOwnerParams) error {
	_, err := q.db.ExecContext(ctx, createShopOwner, arg.UserId, arg.BussinessLicense)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users(id,email, phone_number, first_name,last_name)
VALUES ($1,
        $2,
        $3,
        $4,
        $5
        )
`

type CreateUserParams struct {
	ID          uuid.NullUUID
	Email       sql.NullString
	PhoneNumber sql.NullString
	FirstName   sql.NullString
	LastName    sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.PhoneNumber,
		arg.FirstName,
		arg.LastName,
	)
	return err
}

const findAllAddressOfUser = `-- name: FindAllAddressOfUser :many
SELECT priority, street, town, city, province, user_id FROM addresses WHERE user_id = $1
`

func (q *Queries) FindAllAddressOfUser(ctx context.Context, userid uuid.NullUUID) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, findAllAddressOfUser, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.Priority,
			&i.Street,
			&i.Town,
			&i.City,
			&i.Province,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByCriteria = `-- name: FindUserByCriteria :one
SELECT id, email, phone_number, first_name, last_name, role, c.user_id, loyal_point, s.user_id, bussiness_license
FROM users u
LEFT JOIN customers c ON u.id = c.user_id
LEFT JOIN shop_owners s ON u.id = s.user_id
WHERE
    CASE $1
        WHEN 'email' THEN u.email = $2::text
        WHEN 'phone_number' THEN u.phone_number = $2::text
        WHEN 'id' THEN u.id = $2::uuid
        WHEN 'firstName' THEN u.first_name = $2::text
        WHEN 'lastName' THEN u.last_name = $2::text
    END
LIMIT 1
`

type FindUserByCriteriaParams struct {
	Criteria interface{}
	Value    sql.NullString
}

type FindUserByCriteriaRow struct {
	ID               uuid.UUID
	Email            string
	PhoneNumber      string
	FirstName        string
	LastName         string
	Role             NullRoleEnum
	UserID           uuid.NullUUID
	LoyalPoint       sql.NullInt32
	UserID_2         uuid.NullUUID
	BussinessLicense sql.NullString
}

func (q *Queries) FindUserByCriteria(ctx context.Context, arg FindUserByCriteriaParams) (FindUserByCriteriaRow, error) {
	row := q.db.QueryRowContext(ctx, findUserByCriteria, arg.Criteria, arg.Value)
	var i FindUserByCriteriaRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.UserID,
		&i.LoyalPoint,
		&i.UserID_2,
		&i.BussinessLicense,
	)
	return i, err
}

const updateAddress = `-- name: UpdateAddress :exec
UPDATE addresses
SET
    street = COALESCE($1,street),
    town = COALESCE($2,town),
    city = COALESCE($3,city),
    province = COALESCE($4,province)
WHERE user_id = $5 AND priority = $6
`

type UpdateAddressParams struct {
	Street   sql.NullString
	Town     sql.NullString
	City     sql.NullString
	Province sql.NullString
	UserId   uuid.NullUUID
	Priority sql.NullInt32
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) error {
	_, err := q.db.ExecContext(ctx, updateAddress,
		arg.Street,
		arg.Town,
		arg.City,
		arg.Province,
		arg.UserId,
		arg.Priority,
	)
	return err
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customers
SET
    loyal_point = COALESCE($1,loyal_point)
WHERE user_id = $2
`

type UpdateCustomerParams struct {
	LoyalPoint sql.NullInt32
	UserId     uuid.NullUUID
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomer, arg.LoyalPoint, arg.UserId)
	return err
}

const updateShopOwner = `-- name: UpdateShopOwner :exec
UPDATE shop_owners
SET
    bussiness_license = COALESCE($1,bussiness_license)
WHERE user_id = $2
`

type UpdateShopOwnerParams struct {
	BussinessLicense sql.NullString
	UserId           uuid.NullUUID
}

func (q *Queries) UpdateShopOwner(ctx context.Context, arg UpdateShopOwnerParams) error {
	_, err := q.db.ExecContext(ctx, updateShopOwner, arg.BussinessLicense, arg.UserId)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    email = COALESCE($1,email),
    phone_number = COALESCE($2,phone_number),
    first_name = COALESCE($3,first_name),
    last_name = COALESCE($4,last_name),
    role = COALESCE($5,role)
WHERE id = $6
`

type UpdateUserParams struct {
	Email       sql.NullString
	PhoneNumber sql.NullString
	FirstName   sql.NullString
	LastName    sql.NullString
	Role        NullRoleEnum
	ID          uuid.NullUUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Email,
		arg.PhoneNumber,
		arg.FirstName,
		arg.LastName,
		arg.Role,
		arg.ID,
	)
	return err
}
