// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAddress = `-- name: CreateAddress :exec
INSERT INTO addresses(street, town, city, province,user_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
`

type CreateAddressParams struct {
	Street   sql.NullString
	Town     sql.NullString
	City     sql.NullString
	Province sql.NullString
	UserId   uuid.NullUUID
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) error {
	_, err := q.db.ExecContext(ctx, createAddress,
		arg.Street,
		arg.Town,
		arg.City,
		arg.Province,
		arg.UserId,
	)
	return err
}

const createCustomer = `-- name: CreateCustomer :exec
INSERT INTO customers(user_id,loyal_point)
VALUES(
    $1,
    $2
)
`

type CreateCustomerParams struct {
	UserId     uuid.NullUUID
	LoyalPoint sql.NullInt32
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, createCustomer, arg.UserId, arg.LoyalPoint)
	return err
}

const createShopOwner = `-- name: CreateShopOwner :exec
INSERT INTO shop_owners(user_id,bussiness_license)
VALUES(
    $1,
    $2
)
`

type CreateShopOwnerParams struct {
	UserId           uuid.NullUUID
	BussinessLicense sql.NullString
}

func (q *Queries) CreateShopOwner(ctx context.Context, arg CreateShopOwnerParams) error {
	_, err := q.db.ExecContext(ctx, createShopOwner, arg.UserId, arg.BussinessLicense)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users(id,email, phone_number, first_name,last_name)
VALUES ($1, 
        $2,
        $3,
        $4,
        $5
        )
`

type CreateUserParams struct {
	ID          uuid.NullUUID
	Email       sql.NullString
	PhoneNumber sql.NullString
	FirstName   sql.NullString
	LastName    sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.PhoneNumber,
		arg.FirstName,
		arg.LastName,
	)
	return err
}

const findAllAddressOfUser = `-- name: FindAllAddressOfUser :many
SELECT id, street, town, city, province, user_id FROM addresses WHERE user_id = $1
`

func (q *Queries) FindAllAddressOfUser(ctx context.Context, userid uuid.NullUUID) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, findAllAddressOfUser, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.Street,
			&i.Town,
			&i.City,
			&i.Province,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserById = `-- name: FindUserById :one
SELECT id, email, phone_number, first_name, last_name, role, c.user_id, loyal_point, s.user_id, bussiness_license
FROM users u
LEFT JOIN customers c ON u.id = c.user_id
LEFT JOIN shop_owners s ON u.id = s.user_id
WHERE id = $1
LIMIT 1
`

type FindUserByIdRow struct {
	ID               uuid.UUID
	Email            string
	PhoneNumber      string
	FirstName        string
	LastName         string
	Role             NullRoleEnum
	UserID           uuid.NullUUID
	LoyalPoint       sql.NullInt32
	UserID_2         uuid.NullUUID
	BussinessLicense sql.NullString
}

func (q *Queries) FindUserById(ctx context.Context, userid uuid.NullUUID) (FindUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, findUserById, userid)
	var i FindUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.UserID,
		&i.LoyalPoint,
		&i.UserID_2,
		&i.BussinessLicense,
	)
	return i, err
}
