// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: users/v1/auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SignUpRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignUpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignUpRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignUpRequestMultiError, or
// nil if none found.
func (m *SignUpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignUpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for PhoneNumber

	if len(errors) > 0 {
		return SignUpRequestMultiError(errors)
	}

	return nil
}

// SignUpRequestMultiError is an error wrapping multiple validation errors
// returned by SignUpRequest.ValidateAll() if the designated constraints
// aren't met.
type SignUpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignUpRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignUpRequestMultiError) AllErrors() []error { return m }

// SignUpRequestValidationError is the validation error returned by
// SignUpRequest.Validate if the designated constraints aren't met.
type SignUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpRequestValidationError) ErrorName() string { return "SignUpRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpRequestValidationError{}

// Validate checks the field values on SignUpResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignUpResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignUpResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignUpResponseMultiError,
// or nil if none found.
func (m *SignUpResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SignUpResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignUpResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignUpResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignUpResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignUpResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignUpResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignUpResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SignUpResponseMultiError(errors)
	}

	return nil
}

// SignUpResponseMultiError is an error wrapping multiple validation errors
// returned by SignUpResponse.ValidateAll() if the designated constraints
// aren't met.
type SignUpResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignUpResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignUpResponseMultiError) AllErrors() []error { return m }

// SignUpResponseValidationError is the validation error returned by
// SignUpResponse.Validate if the designated constraints aren't met.
type SignUpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpResponseValidationError) ErrorName() string { return "SignUpResponseValidationError" }

// Error satisfies the builtin error interface
func (e SignUpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpResponseValidationError{}

// Validate checks the field values on SignUpData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignUpData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignUpData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignUpDataMultiError, or
// nil if none found.
func (m *SignUpData) ValidateAll() error {
	return m.validate(true)
}

func (m *SignUpData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SignUpDataMultiError(errors)
	}

	return nil
}

// SignUpDataMultiError is an error wrapping multiple validation errors
// returned by SignUpData.ValidateAll() if the designated constraints aren't met.
type SignUpDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignUpDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignUpDataMultiError) AllErrors() []error { return m }

// SignUpDataValidationError is the validation error returned by
// SignUpData.Validate if the designated constraints aren't met.
type SignUpDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpDataValidationError) ErrorName() string { return "SignUpDataValidationError" }

// Error satisfies the builtin error interface
func (e SignUpDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpDataValidationError{}

// Validate checks the field values on LogInRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogInRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogInRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogInRequestMultiError, or
// nil if none found.
func (m *LogInRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogInRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := LogInRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = LogInRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 32 {
		err := LogInRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LogInRequestMultiError(errors)
	}

	return nil
}

func (m *LogInRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *LogInRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// LogInRequestMultiError is an error wrapping multiple validation errors
// returned by LogInRequest.ValidateAll() if the designated constraints aren't met.
type LogInRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogInRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogInRequestMultiError) AllErrors() []error { return m }

// LogInRequestValidationError is the validation error returned by
// LogInRequest.Validate if the designated constraints aren't met.
type LogInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogInRequestValidationError) ErrorName() string { return "LogInRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogInRequestValidationError{}

// Validate checks the field values on LogInResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogInResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogInResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogInResponseMultiError, or
// nil if none found.
func (m *LogInResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LogInResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogInResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogInResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogInResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogInResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogInResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogInResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LogInResponseMultiError(errors)
	}

	return nil
}

// LogInResponseMultiError is an error wrapping multiple validation errors
// returned by LogInResponse.ValidateAll() if the designated constraints
// aren't met.
type LogInResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogInResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogInResponseMultiError) AllErrors() []error { return m }

// LogInResponseValidationError is the validation error returned by
// LogInResponse.Validate if the designated constraints aren't met.
type LogInResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogInResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogInResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogInResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogInResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogInResponseValidationError) ErrorName() string { return "LogInResponseValidationError" }

// Error satisfies the builtin error interface
func (e LogInResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogInResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogInResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogInResponseValidationError{}

// Validate checks the field values on LogInData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogInData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogInData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogInDataMultiError, or nil
// if none found.
func (m *LogInData) ValidateAll() error {
	return m.validate(true)
}

func (m *LogInData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return LogInDataMultiError(errors)
	}

	return nil
}

// LogInDataMultiError is an error wrapping multiple validation errors returned
// by LogInData.ValidateAll() if the designated constraints aren't met.
type LogInDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogInDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogInDataMultiError) AllErrors() []error { return m }

// LogInDataValidationError is the validation error returned by
// LogInData.Validate if the designated constraints aren't met.
type LogInDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogInDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogInDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogInDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogInDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogInDataValidationError) ErrorName() string { return "LogInDataValidationError" }

// Error satisfies the builtin error interface
func (e LogInDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogInData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogInDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogInDataValidationError{}

// Validate checks the field values on ConfirmSignUpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmSignUpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmSignUpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmSignUpRequestMultiError, or nil if none found.
func (m *ConfirmSignUpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmSignUpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return ConfirmSignUpRequestMultiError(errors)
	}

	return nil
}

// ConfirmSignUpRequestMultiError is an error wrapping multiple validation
// errors returned by ConfirmSignUpRequest.ValidateAll() if the designated
// constraints aren't met.
type ConfirmSignUpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmSignUpRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmSignUpRequestMultiError) AllErrors() []error { return m }

// ConfirmSignUpRequestValidationError is the validation error returned by
// ConfirmSignUpRequest.Validate if the designated constraints aren't met.
type ConfirmSignUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmSignUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmSignUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmSignUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmSignUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmSignUpRequestValidationError) ErrorName() string {
	return "ConfirmSignUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmSignUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmSignUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmSignUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmSignUpRequestValidationError{}

// Validate checks the field values on ConfirmSignUpData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConfirmSignUpData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmSignUpData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmSignUpDataMultiError, or nil if none found.
func (m *ConfirmSignUpData) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmSignUpData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConfirmSignUpDataMultiError(errors)
	}

	return nil
}

// ConfirmSignUpDataMultiError is an error wrapping multiple validation errors
// returned by ConfirmSignUpData.ValidateAll() if the designated constraints
// aren't met.
type ConfirmSignUpDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmSignUpDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmSignUpDataMultiError) AllErrors() []error { return m }

// ConfirmSignUpDataValidationError is the validation error returned by
// ConfirmSignUpData.Validate if the designated constraints aren't met.
type ConfirmSignUpDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmSignUpDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmSignUpDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmSignUpDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmSignUpDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmSignUpDataValidationError) ErrorName() string {
	return "ConfirmSignUpDataValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmSignUpDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmSignUpData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmSignUpDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmSignUpDataValidationError{}

// Validate checks the field values on ConfirmSignUpResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmSignUpResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmSignUpResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmSignUpResponseMultiError, or nil if none found.
func (m *ConfirmSignUpResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmSignUpResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfirmSignUpResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfirmSignUpResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfirmSignUpResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfirmSignUpResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfirmSignUpResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfirmSignUpResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfirmSignUpResponseMultiError(errors)
	}

	return nil
}

// ConfirmSignUpResponseMultiError is an error wrapping multiple validation
// errors returned by ConfirmSignUpResponse.ValidateAll() if the designated
// constraints aren't met.
type ConfirmSignUpResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmSignUpResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmSignUpResponseMultiError) AllErrors() []error { return m }

// ConfirmSignUpResponseValidationError is the validation error returned by
// ConfirmSignUpResponse.Validate if the designated constraints aren't met.
type ConfirmSignUpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmSignUpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmSignUpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmSignUpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmSignUpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmSignUpResponseValidationError) ErrorName() string {
	return "ConfirmSignUpResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmSignUpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmSignUpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmSignUpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmSignUpResponseValidationError{}
